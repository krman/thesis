12/09
http://en.wikipedia.org/wiki/Grammatical_evolution
http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.47.5672

"automatic programming of robots" - something Michael O'Neill did in 2001 or something, but wow, that sounds insanely cool, but wouldn't that make much more sense with the grammatical evolution thing
MAN this would be such an awesome topic, the minute i saw that i was like omg, yes, that is the topic i want to do, but the problem is, can i actually do such a thing? and wouldn't that be AMAZING if i could continue that into my thesis? or special topics or something when i get back, heck that would make such an awesome summer research project... but anyway... i'm going to treat this course as special topics, the only assessment is the academic paper anyway and that would be so awesome and I should totally get it published and everything, i mean not that that is going to happen but yeah... this is like science fiction, man... i always said i wanted to do my part to make science fiction come true and i mean sure this is the freaky evil bit of science fiction where robots evolve and take over the world and i think this is no longer academic research notes...
i have until the 10th of october to come up with an amazing project and design so he actually lets me do such an awesome topic.
o O'Neill M., Collins J.J., Ryan C. Automatic Programming of Robots. In Proceedings of AICS 2000. 
of course i can't just be like, this 10 page 4th year undergrad paper is going to solve the robot navigation problem. if indeed that is even a problem. maybe i could be like, well, we've seen how Koza & Rice in 1992 did automatic programming of robots using genetic programming, so why not use grammatical evolution to tweak that and see if it's better - or similar, i mean obviously i would have to look at the literature (i'm a cool academic using cool academic words, YEAHHH) but i'd like to end up doing something similar to that. i would just copy their methodology and crap. i think i would need to write some sort of robot simulator, but that's cool, i can do that, it doesn't have to be fancy. sure it will take up all my time but it will be an interesting side project. i've been staying up til all hours anyway. and saskia's going to spain so yeah. i won't have a social life. and people in the computer lab won't judge me for spending my time on my laptop writing robot simulators. i just won't mention it's actually for class.
this is so cool. automatic programming is like the ultimate in laziness. something about it just fundamentally appeals to me. i could do all that cool stuff i read about when i was doing my literature review with urban search and rescue, like for my project, what?
grr Michael O'Neill for doing all this stuff in 2000!!
o O'Neill M., Collins J.J., Ryan C. Automatic Generation of Robot Behaviours using Grammatical Evolution. In Proceedings of AROB 2000, the Fifth International Symposium on Artificial Life and Robotics, pages 351-354. 
o O'Neill M. Automatic Programming with Grammatical Evolution. In Proceedings of the Genetic and Evolutionary Computation Conference Workshop Program, July 13-17, 1999, Orlando, Florida USA. San Francisco, CA: Morgan Kaufmann.
why don't i just steal his PhD while i'm at it?
http://www.grammatical-evolution.org/pubs.html
well. i shouldn't be surprised that the list of publications at grammatical-evolution.org lists, you know, papers to do with grammatical evolution.
but i still really want to do something with robots. that simulator thing from 1992 sounded really cool. copying old research is awesome. maybe, like, different things you can combine grammatical evolution with? i really want to learn more about this GE thing because it sounds really interesting, and i want to learn about grammars in the context of computer science anyway and the only way to really do that is to do a really hard project on them.
but just comparing GE with a bunch of stuff is not really interesting. like, not publishable quality. that is what i am going for. something i can show MIT admissions.
doing this using LISP as the language would be the most insanely awesome thing ever. and yes. it would make me a hipster. and i am okay with that.
i think i need to read more about what has actually been done in this field, preferably stuff that has been done in the last two or three years - or even more recently, i have no idea how fast this field is moving - so it's actually vaguely current and interesting research. yes, i am going to think of it as research. i am going to do something that would actually be interesting to someone at a conference, and i am going to fantasise about presenting this at said conference. it's not that unrealistic a goal. i mean, i could do this as my thesis topic or special topics or summer research project or something. i'll be one of those really excellent people who suggests their own thesis topic!! and i certainly intend to publish something from at least one of those. i mean. please. MIT is not going to admit me based on my grades...
but all of this can wait for a time when it's not 2 o'clock in the morning...

18/09
So. I haven't really been thinking of this much, most of my daydreaming lately has been about hitchhiking in the US, but we can live with that.
But I have gotten a little further in thinking about this.
Simulation, obviously. Actual robotics is way out of my league and it'd be creating problems outside of the scope of the course.
LISP, because it is actually agreed in the literature that having such a regular structure makes it ideal for this sort of application. Note to self: find source for this statement. 
Problem domain: urban search and rescue? I feel this would be relevant to further research, plus it's a topic that interested me over summer.
MASON, to do the simulation itself? I'll look into it, I'm not sure what that guy did and I don't want to just evolve parameters, that's stupid. I want to actually evolve the code.
I want to be able to post something on facebook and be like I DID NOT WRITE THIS CODE, IT EVOLVED, AREN'T I AWESOME?
So evolving code. Probably a bit hit and miss, but hey, human life evolved, right?
It sort of just occurred to me that this is a really big insane project. But that'll keep me up at night working on it, right?
I need to be able to work the program.
Maybe. Um. There is some sort of game, like that guy who did keepaway soccer, and the object is to evolve an AI to play the game. You get points for easy stuff, like being able to just move around, more if you can recognise other objects, etc. Seriously, if that guy could evolve 3D worm things out of absolutely nothing, I don't see why I can't evolve a couple of bots to be able to work their way through a maze, right? All they have to do is be able to send - ooh, network communications might be tricky, I may need to seed it with something, but hopefully I won't need to write any code if I make the requirements easy enough for the robots. I could bring the grammar into it. "Send something over the network" could be something already encoded in, and there is a random chance that that could happen. Yeah. Grammatical evolution ftw. I will one of these days work out what a context-free grammar is. I guess I could discuss some of these issues in my paper, and say things like, well, the grammar allows me to abstract away some things like sending stuff over a network, which would otherwise be way too hard? I REALLY need to work out if my idea of what a CFG is actually matches the definition in any way, shape or form.
Anyway, they get points for even managing to send something over the network, more if it's something relevant (I suppose I should give it a list of possible moves as well, a list of things it can do). The network will come back and tell it if it's something stupid or impossible, like walking into a wall, or trying to rescue something when there's nothing there. Maybe I could make it play pacman!! That would be so incredibly cool. And would maximise my chances of being able to show it off to other people, although not really to get it submitted somewhere, but obviously I'm not going to be submitting this particular paper, just using the experience to do something cool with robots later on. The advantage of pacman is that there are already clearly defined rules, and there is probably someone who has already written code that just needs an AI to play it. Hmm, I'd better google this. "Evolving an AI for PacMan"... I'd better google the appropriate capitalisation of pacman, too :)
Fuck the world, someone already did that using neural networks. AIPac on sourceforge.
Actually, it's a fairly common problem, which is actually good. Someone will already have written a fantastic AI using all the most awesome AI techniques available (see 2010 paper on teaching AI with pacman, DeNero & Klein). Which means I don't need to learn any domain-specific crap. It's a pity that AI championship thing is over, which by the way Ben Stevens entered! which is kind of cool. Either way though, I'm sure I could get someone's code, use the same Java program, and just play off against one of the really good ones. Pity Ben's only won half the time ;) else I'd have asked him directly, which would have been way cooler, because it'd be actual collaboration with someone I know, and that would have been awesome.
Okay the more I read the more I see that this is INCREDIBLY widely-studied, to the point of being practically overdone, maybe I should choose a different application? Alhejali & Lucas (2010) have a really great description of the functional stuff. "Genetic programming" is EXACTLY the field that interests me. A LOT of work has been done with GP and Pac-Man although I suppose I could try something with - what's it called? grammatical evolution, although if this field is so widely studied it'd hardly be ground-breaking research. Mind you if the 2006 papers are anything to go by (and the attitudes of people in class today) they are really not expecting anything too high-class. Anyway though. I should really read up on what they have to say.
KOZA talked about Ms Pac-Man! god, great minds think alike. I would just like to say that I'm really proud of myself for independently coming up with the concept of genetic programming. yeah.
My thoughts and ideas are being mirrored in the literature, the more I read. I'm going to take this as a compliment and read more and more, and eventually I'll start to see gaps (I'm already up to research being done in 2012!) and figure out some cool new thing I can do.
Brandstetter 2012 mentions wanting to avoid domain-specific knowledge as much as possible, which I think is an excellent idea.
Maybe I could compare it against multiple domains, and be like, fuck yeah, I wrote a program to beat Ms Pac-Man which can also be used to solve XXX (where XXX is something that is not porn). That could be cool, because then I could be like, well, computer-generated code is really crap, because it doesn't have comments and whatever, so there has to be a reason you would evolve a solution instead of just writing one (it presumably takes a lot of effort to evolve a solution if all these academics are getting paid for it). And I guess one of those reasons is that the AI might discover a cool new way of doing stuff that's interesting to watch, but let's face it, it's not that great, usually people are talking about AIs that can compete with an amateur human player at best, so they aren't likely to evolve anything groundbreaking. But an even more likely reason is laziness, not that I am going to mention that. But laziness only comes into it when it actually genuinely takes less effort - no, that's not true. It might take effort at the start, but it pays off over time when you're not stuck having to do the same crap over and over again. Like automating system tasks. The idea is you put in the effort now, then you go off and have sword fights on your swivel chairs and say your code's compiling and maybe I'm thinking of something else entirely. Whatever. Point is, it takes a lot of effort to write a Pac-Man controller. And whether you focus your efforts on actually writing it or writing a program that will evolve a solution, you're pretty much just trying to be cool for the sake of being cool if your evolved solution requires a lot of domain-specific knowledge. Actually, any domain-specific knowledge whatsoever. Alright, I'm being annoying now, but obviously the less you have the more applicable it is to a lot of other domains. On the other hand, it means the AI has to evolve even the most basic crap, like distances to ghosts and things like that. Hmm. I wonder how it'll do that? Or if it even will? That's sort of... really complicated. Obviously you have to give it enough information that - well. I'm making assumptions here. Chill, dude. The idea of this exercise is to see just how little you need to do to evolve a functioning AI. Good enough is good enough. This is an exercise in breadth, not depth. The idea is to create something that's okay at a whole bunch of stuff, not brilliant at one thing. This AI doesn't even need to develop a STRATEGY if it doesn't want to. It just needs to be able to play the game. It just needs to be able to learn the rules of the game, that's all! Telling it the rules in advance would completely defeat the object! This guy is the all-rounder. He's up for any game, he won't thump you in one and not even be able to walk around in another. I'd much rather have him over for a party than that irritating guy you know who kicks ass at COD and won't shut up about it, but as soon as you want a nice friendly game of mario kart he's all, mario kart's for noobs, amirite, let's play a real game, and you're all there are five of us who really can't be stuffed with the shooting crap and seriously can we just play one round before the pizza arrives instead of having this stupid debate?
not that i have a grudge or anything.
i should seriously start a blog, i reckon i have some fascinating things to say that would really bring this subject to the masses.
so. write something that can play pac-man, uh, snake? something like that. heck any vaguely mobile-phone oriented game. i could encourage it to develop stuff by having functions, but hmm, that's sort of weird. i mean, like, encouraging it to use functions, but i don't know how you would even do that.
hang on. who said it can't have a strategy? obviously it's not just going to randomly send button presses and hope everything goes well. it will have some way of getting in information from the game, like a binary string of all possible positions. heck why does it even have to be a binary string, fuck that shit. but it could be, there's nothing stopping it from being a binary string, in fact that would be even cooler because then you don't even need knowledge of the boundaries, like that it's encoding 4 bits for each block on the map or whatever. that made no sense but okay. but theoretically it could. i'll see how it goes and possibly make some adjustments.
well, i could compare just letting it loose, vs telling it how to interpret the binary string, which doesn't require a lot of extra human input.
but ideally the less i have to hard-code the better.
anyway, because i KNOW i'll forget this in the morning, my idea for evolving a strategy just involves doing different things based on what the different inputs are. for example, "if the first 4 bits are 0000, turn left". which is vaguely useful information. i'll limit this to just two games because it's a proof-of-concept, really.
FUCK OFF, this is EXACTLY marcus gallagher's research interest. FUCK HIM.
no, this is cool, he did something with neural networks, probably because he knows that's a way smarter way of going about it, but that's okay, it means i have more to cite in the literature review. it's a Good Thing(tm) when other people are doing similar work! it means there is actually something to it!
and besides, he just focused on pac-man, not the can it do two separate things angle. and he didn't do anything with grammatical evolution, i don't think. so it's still applying it to a new problem. but argh. god of the gaps much? every time i have an awesome idea i see it's already taken.
but yeah, am TOTALLY going to write him an email and tell him i've been reading his papers.
yeah, it's okay, his is totally focused on neural networks.
anyway. will continue, once again, when it's not 2am.

20/09
class - make sure fitness function is linearish

23/09
time to get serious about experimental method.
okay.
project proposal is out, the questions are:
what is the question that this proposal addresses?
why is this problem significant?
how will the question be addressed?


























